Here's a **complete, step-by-step guide** to build your MVP Flutter app for **AquaBell**, with:

* ‚úÖ Real-time sensor monitoring via MQTT
* ‚úÖ Data logging to Firestore
* ‚úÖ In-app (local) notifications for parameter alerts
* ‚úÖ 100% free-tier only (no Firebase billing, no backend)
* ‚úÖ Works with your 2x ESP32s + 1 laptop

---

# üõ†Ô∏è FULL GUIDE: AquaBell App (Free MVP Build)

---

## üì¶ TECH STACK

| Component            | Purpose             | Tech Used                                                                        |
| -------------------- | ------------------- | -------------------------------------------------------------------------------- |
| ESP32                | Sensor source       | MQTT (Pub) + Firestore (optional)                                                |
| HiveMQ Cloud         | MQTT broker         | Free-tier HiveMQ Cloud                                                           |
| Flutter              | Mobile app          | `mqtt_client`, `firebase_core`, `cloud_firestore`, `flutter_local_notifications` |
| Firestore (Firebase) | Logging, thresholds | Firebase (Free-tier, no billing)                                                 |
| Local Notifications  | In-app alerts       | `flutter_local_notifications`                                                    |

---

## ‚úÖ STEP 1: Prepare Firebase (Free)

### 1.1 Create Firebase Project

* Go to [Firebase Console](https://console.firebase.google.com/)
* Create a project (e.g., `aquabell-mvp`)
* Disable Google Analytics

### 1.2 Add Android App

* Register with **your App ID**, e.g.:

  ```
  com.pavel.aquabell
  ```
* Download and place `google-services.json` into:

  ```
  android/app/
  ```

### 1.3 Enable Firestore

* Go to **Firestore > Create Database**
* Start in **test mode**

---

## ‚úÖ STEP 2: Set Up Flutter Project

### 2.1 Create Flutter App

```bash
flutter create aquabell
cd aquabell
```

### 2.2 Update `android/app/build.gradle`

```kotlin
defaultConfig {
    applicationId "com.pavel.aquabell"
    ...
}
```

### 2.3 Add dependencies to `pubspec.yaml`

```yaml
dependencies:
  flutter:
    sdk: flutter
  firebase_core: ^latest
  cloud_firestore: ^latest
  mqtt_client: ^latest
  flutter_local_notifications: ^latest
  firebase_messaging: ^latest
```

### 2.4 Initialize Firebase in `main.dart`

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}
```

---

## ‚úÖ STEP 3: Set Up HiveMQ Cloud

### 3.1 Create Account

* Go to [hivemq.cloud](https://www.hivemq.com/mqtt-cloud-broker/)
* Sign up and create a **free cluster**

### 3.2 Create Credentials

* Username/password
* Broker URL (e.g., `YOUR_ID.s2.eu.hivemq.cloud`)
* Port: `8883` (TLS)

### 3.3 MQTT Topics

Use these standard topics:

```
aquabell/sensors/{deviceId}
aquabell/alerts/{deviceId}
```

---

## ‚úÖ STEP 4: ESP32 Code (MQTT + Alert)

* ESP32 connects to HiveMQ using `PubSubClient` (Arduino)
* Publishes sensor values to:

  ```
  aquabell/sensors/device_01
  ```
* If value exceeds limit:

  ```
  aquabell/alerts/device_01 ‚Üí { "param": "ph", "value": 9.0 }
  ```

---

## ‚úÖ STEP 5: Flutter Real-Time Monitoring via MQTT

### 5.1 Connect to HiveMQ

```dart
final client = MqttServerClient.withPort('YOUR_ID.s2.eu.hivemq.cloud', '', 8883);
client.secure = true;
client.setProtocolV311();
client.connectionMessage = MqttConnectMessage()
    .withClientIdentifier('flutter_client')
    .authenticateAs('your-username', 'your-password');

await client.connect();
```

### 5.2 Subscribe to Sensor + Alert Topics

```dart
client.subscribe('aquabell/sensors/#', MqttQos.atLeastOnce);
client.subscribe('aquabell/alerts/#', MqttQos.atLeastOnce);
```

---

## ‚úÖ STEP 6: Show Real-Time UI & Detect Alerts

### 6.1 Parse MQTT Payload

```dart
client.updates!.listen((List<MqttReceivedMessage<MqttMessage>> c) {
  final payload = MqttPublishPayload.bytesToStringAsString((c[0].payload as MqttPublishMessage).payload.message);
  final data = jsonDecode(payload);

  // Update UI
  if (c[0].topic.startsWith('aquabell/sensors/')) {
    updateSensorDisplay(data);
  }

  // Handle alerts
  if (c[0].topic.startsWith('aquabell/alerts/')) {
    showLocalNotification('ALERT!', 'PH value is ${data['value']}');
    logAlertToFirestore(data);
  }
});
```

---

## ‚úÖ STEP 7: Log Alerts/Data to Firestore

### 7.1 Firestore Structure (recommended)

```
/sensors/device_01/logs/{timestamp}
/alerts/device_01/last_alert
```

### 7.2 Save Logs

```dart
FirebaseFirestore.instance
  .collection('sensors')
  .doc('device_01')
  .collection('logs')
  .add({
    'timestamp': FieldValue.serverTimestamp(),
    'ph': data['ph'],
    'ec': data['ec'],
  });
```

---

## ‚úÖ STEP 8: Set Up In-App Notifications

### 8.1 Init `flutter_local_notifications`

```dart
final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
    FlutterLocalNotificationsPlugin();

void initializeNotifications() {
  const AndroidInitializationSettings initializationSettingsAndroid =
      AndroidInitializationSettings('@mipmap/ic_launcher');

  final InitializationSettings initializationSettings = InitializationSettings(
    android: initializationSettingsAndroid,
  );

  flutterLocalNotificationsPlugin.initialize(initializationSettings);
}
```

### 8.2 Show Notification

```dart
void showLocalNotification(String title, String body) async {
  const AndroidNotificationDetails androidPlatformChannelSpecifics =
      AndroidNotificationDetails('channel_id', 'channel_name',
          importance: Importance.max, priority: Priority.high);

  const NotificationDetails platformChannelSpecifics =
      NotificationDetails(android: androidPlatformChannelSpecifics);

  await flutterLocalNotificationsPlugin.show(
      0, title, body, platformChannelSpecifics);
}
```

Call `initializeNotifications()` in `main()`.

---

## ‚úÖ OPTIONAL: Display Logs in UI

You can query Firestore:

```dart
FirebaseFirestore.instance
  .collection('sensors')
  .doc('device_01')
  .collection('logs')
  .orderBy('timestamp', descending: true)
  .limit(20)
```

Then render in a list/table.

---

## üß™ TESTING CHECKLIST

| Test Case                   | Expected Result                         |
| --------------------------- | --------------------------------------- |
| ESP32 sends sensor data     | Shows real-time updates in app          |
| ESP32 sends alert           | Local notification appears              |
| App logs data to Firestore  | Can query logs in Firebase              |
| App in foreground           | MQTT & local notifications work         |
| App in background (Android) | Local notification **may** still appear |
| App fully closed            | ‚ùå No notification (no push support)     |

---

## üß† Final Notes

* You're building a **solid free MVP**
* Local-only notifications are good enough for early-stage feedback
* You can add full push support later with a self-hosted script

---

## üí¨ Want Help With

* Actual ESP32 MQTT code?
* Graphing the sensor history in Flutter?
* Exporting data as CSV?
* Adding thresholds the farmer can set in-app?

Tell me where you want to go next, and I‚Äôll walk you through it.
